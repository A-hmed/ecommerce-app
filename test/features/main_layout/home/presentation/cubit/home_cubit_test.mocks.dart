// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce_app/test/features/main_layout/home/presentation/cubit/home_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ecommerce_app/features/base/failures/failures.dart' as _i6;
import 'package:ecommerce_app/features/main_layout/domain/model/category.dart'
    as _i7;
import 'package:ecommerce_app/features/main_layout/domain/model/product.dart'
    as _i10;
import 'package:ecommerce_app/features/main_layout/domain/repositories/home_repository.dart'
    as _i2;
import 'package:ecommerce_app/features/main_layout/domain/usecase/get_categories_usecase.dart'
    as _i3;
import 'package:ecommerce_app/features/main_layout/domain/usecase/get_product_usecase.dart'
    as _i9;
import 'package:ecommerce_app/features/main_layout/domain/usecase/get_sub_categories_by_category_usecase.dart'
    as _i11;
import 'package:either_dart/either.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeRepository_0 extends _i1.SmartFake
    implements _i2.HomeRepository {
  _FakeHomeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCategoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriesUseCase extends _i1.Mock
    implements _i3.GetCategoriesUseCase {
  MockGetCategoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get homeRepository => (super.noSuchMethod(
        Invocation.getter(#homeRepository),
        returnValue: _FakeHomeRepository_0(
          this,
          Invocation.getter(#homeRepository),
        ),
      ) as _i2.HomeRepository);

  @override
  set homeRepository(_i2.HomeRepository? _homeRepository) => super.noSuchMethod(
        Invocation.setter(
          #homeRepository,
          _homeRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.Category>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i4.Future<_i5.Either<_i6.Failure, List<_i7.Category>>>.value(
                _i8.dummyValue<_i5.Either<_i6.Failure, List<_i7.Category>>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.Failure, List<_i7.Category>>>);
}

/// A class which mocks [GetProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsUseCase extends _i1.Mock
    implements _i9.GetProductsUseCase {
  MockGetProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get homeRepository => (super.noSuchMethod(
        Invocation.getter(#homeRepository),
        returnValue: _FakeHomeRepository_0(
          this,
          Invocation.getter(#homeRepository),
        ),
      ) as _i2.HomeRepository);

  @override
  set homeRepository(_i2.HomeRepository? _homeRepository) => super.noSuchMethod(
        Invocation.setter(
          #homeRepository,
          _homeRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i10.Product>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i4.Future<_i5.Either<_i6.Failure, List<_i10.Product>>>.value(
                _i8.dummyValue<_i5.Either<_i6.Failure, List<_i10.Product>>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.Failure, List<_i10.Product>>>);
}

/// A class which mocks [GetSubCategoriesByCategoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSubCategoriesByCategoryUseCase extends _i1.Mock
    implements _i11.GetSubCategoriesByCategoryUseCase {
  MockGetSubCategoriesByCategoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get homeRepository => (super.noSuchMethod(
        Invocation.getter(#homeRepository),
        returnValue: _FakeHomeRepository_0(
          this,
          Invocation.getter(#homeRepository),
        ),
      ) as _i2.HomeRepository);

  @override
  set homeRepository(_i2.HomeRepository? _homeRepository) => super.noSuchMethod(
        Invocation.setter(
          #homeRepository,
          _homeRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.Category>>> execute(
          String? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [categoryId],
        ),
        returnValue:
            _i4.Future<_i5.Either<_i6.Failure, List<_i7.Category>>>.value(
                _i8.dummyValue<_i5.Either<_i6.Failure, List<_i7.Category>>>(
          this,
          Invocation.method(
            #execute,
            [categoryId],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.Failure, List<_i7.Category>>>);
}
